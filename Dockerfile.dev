# Dockerfile (o Dockerfile.dev)

# 1. Usar una imagen base de Node.js (elige una versión LTS estable)
FROM node:23-alpine AS development

# 2. Establecer el directorio de trabajo dentro del contenedor
WORKDIR /app

# 3. Instalar Angular CLI globalmente dentro de la imagen (opcional pero útil para comandos ng)
RUN npm install -g @angular/cli@latest

# 4. Copiar SOLO los archivos de definición de dependencias
# Esto aprovecha el caché de Docker: si no cambian, no se re-ejecuta npm install
COPY package.json ./

# 5. Instalar las dependencias del proyecto
RUN npm install

# 6. Copiar el resto del código fuente (Aunque lo montaremos con un volumen,
#    copiarlo aquí puede ser útil si alguna vez construyes la imagen sin montar volúmenes
#    o para pasos intermedios. Sin embargo, para desarrollo con volumen, este paso
#    se "ignora" en tiempo de ejecución por el montaje del volumen).
# COPY . . # Este paso es opcional para el flujo con docker-compose y volumenes

# 7. Exponer el puerto que usa Angular por defecto
EXPOSE 4200

# 8. Comando por defecto para iniciar el servidor de desarrollo
#    --host 0.0.0.0: Necesario para acceder desde fuera del contenedor.
#    --poll 1000: Ayuda a detectar cambios en archivos cuando se usan volúmenes montados,
#                 especialmente en Windows/macOS. Ajusta el valor (ms) si es necesario.
CMD ["ng", "serve", "--host", "0.0.0.0", "--poll", "1000"]